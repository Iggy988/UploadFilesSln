@page "/"
@inject IConfiguration config

<PageTitle>Upload Demo App</PageTitle>

<h1>Upload Demo</h1>

@*unosimo vise fajlova - multiple, accept- odredjujemo koje fajlove mozemo uplodovati*@
<InputFile OnChange="@LoadFiles" multiple accept=".png,.jpg,.jpeg"/>


@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var item in errors)
        {
            <li>@item</li>
        }
    </ul>
}

@code{
    private long maxFileSize = 1024 * 1024 * 3; //3mb
    private int maxAllowedFiles = 3;
    private List<string> errors = new();

    // kad izaberemo fajlove (InputFile), pokrecemo ovu funkciju
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        // brisemo sve errore na pocetku
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attemptiong to upload {e.FileCount} files, but only {maxAllowedFiles} fileas are allowed.");
            //kad imamo error, zatvaramo funkciju
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),// dajemo random ime fajlu
                Path.GetExtension(file.Name));

                string path = Path.Combine(
                    config.GetValue<string>("FileStorage")!,
                    "iggy",
                    newFileName);

                Directory.CreateDirectory(Path.Combine(
                    config.GetValue<string>("FileStorage")!,
                    "iggy"));

                await using FileStream fs = new(path, FileMode.Create);
                //openning readStream maxFileSize, and copy async to FileStream
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }
}